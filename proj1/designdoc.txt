***************************** Task 1 - KThread *****************************

When a thread is joined, the calling thread needs to be kept track of. If there are multiple calling threads, we will need to keep track of them all. This means we need to add a queue to KThread to store all the joining threads.

joinQueue := empty ThreadQueue

Threads will keep track of their ancestor's thread IDs to prevent cycles. If a thread tries to join another thread, whose id is included the ancestor list, we must disallow this as it indicates a cycle.

ancestorIds := empty list of thread ids

When the current thread calls join on another thread, the current thread will wait for the other thread to finish executing, before continuing with its own execution. This means we must sleep the calling thread, and add it to the join queue. However, if the thread is already finished executing, we should not sleep the calling thread.

We must also be aware of cycles during joins. We must check to see if the current thread's ancestor id list contains the joining thread's id. If it does, we will simply return (no join will occur) and print a debug message indicationg the cycle. Otherwise, we set the joining threads ancestor ID list to that of the current thread, and add the current thread's ID to the list.

function join
  assert thisThread != currentThread

  if currentThread.ancestorIDs.contains(thisThread.id)
    debug "Cyclical join detected."
    return

  thisThread.ancestorIds.addAll(currentThread.ancestorIds)
  thisThread.ancestorIds.add(currentThread.id)

  if status is finished
    return
  else
    disable interrupts
    joinQueue.waitForAccess(thisThread)
    currentThread.sleep()
    enable interrupts

end join

Once a thread has finished executing, any thread on the join queue must be reawoken. Hence, we must iterate through the join queue, and set any thread in it to ready.

function finish
  disable interrupt
  assert toBeDestroyed is null
  toBeDestroyed := currentThread

  for thread in joinQueue
    thread.ready()

  currentThreadStatus := finished
  sleep()
  enable interrupt
end finish

KThread Test Cases:
Case 1: A thread attempts to join an incompleted threed. This will put the current thread to sleep and put the thread on the wait queue.
Case 2: A thread attempts to join a non-existent thread. This will cause an exception because there would be a null pointer.
Case 3: A thread attempts to join itself. This will crash the system due to the assertion that thisThread != currentThread.
Case 4: A thread attempts to join a previously joined thread, creating a cycle. Our implementation will check to see if the thread id is unique in the join, if it isn't, it will cause an exception.
Case 5: A thread attempts to join a finished thread. This will just return.
Case 6: Finish runs on a completed thread. This will cause the toBeDestroyed to be set to the currentThread, threads in its joinQueue will be set to ready, its status will be set to ready and then it will
slept until it is destroyed.
Case 7: Finish runs on a thread while toBeDestroyed isn't null. This will crash the system, but it shouldn't be a problem and we are assuming that the scheduler should handle proper thread destruction.

***************************** Task 2 - Condition2 *****************************

In Condition2, we need to create a threadQueue object.

threadQueue := empty thread queue

function sleep
  assert conditionLock.isHeldByCurrentThread()
  interrupt.disable()

  threadQueue.push(currentThread)
  conditionLock.release() 
  currentThread.sleep()

  interrupt.enable()
end sleep

The wake function will wake up the next available thread, provided there are some on the thread queue.

function wake
  assert conditionLock.isHeldByCurrentThread()
  interrupt.disable()

  thread := threadQueue.nextThread()
  if thread is not null
    thread.ready()
  else
    debug "Thread queue is empty."

  conditionLock.release()
  interrupt.enable()
end wake

The wakeAll function will simply iterate through the thread queue, and wake up all the threads in it.

function wakeAll
  assert conditionLock.isHeldByCurrentThread()
  while threadQueue is not empty
    wake()
end wakeAll

Condition2 Test Cases:
Case 1: A thread has the function sleep called on it. After acquiring the lock, the thread will be put to sleep and put on the wait queue.
Case 2: Another thread has the function sleep called on it. This will function in the same way that Case 1 will now putting two threads sleeping on the wait queue.
Case 3: A third thread has sleep called on it leading to the same result as Cases 2 and 1, with three threads now sleeping on the wait queue.
Case 4: The function wake is called selecting the first thread in the wait queue. This thread (after locks are acquired and interrupts are disabled making the process atomic) wakes and is put on the ready queue where it can be executed and the remaining sleeping processes on the waiting queue progress forwards.
Case 5: The function wakeAll is called which begins cycling through each sleeping thread in the wait queue and wakes them. It begins with the first sleeping thread waking it using the regular wake function then moves on to the second. Once the second finishes being woken up the process will end as its while condition will be satisfied as the wait queue will be empty.
Case 6: The function wake is called and the queue checks to see if there are any sleeping threads waiting. As there are none the function goes to its second option and prints out a debug message stating that the wait queue is empty, then proceeds releasing the lock and re-enabling interrupts as normal.

***************************** Task 3 - Alarm *****************************

A TimerThread class contains an instance variable for a KThread, and a time (UNIX timestamp, represented as a long). It implements comparable, which will allow TimerThread objects to be sorted in ascending order, based around the wake time. For example, KThread(t1, 1000) < KThread(t2, 1001).

class TimeThread implements Comparable:

  var wakeThread (KThread)
  var wakeTime (Long)

  constructor(thread:KThread, time:Long):
    wakeThread := thread
    wakeTime := clockTime + time
  end constructor

end TimeThread

A PriorityQueue class uses a heap to efficiently commit the earliest wakeTime to be first out on pull

class PriorityQueue

  array : list of TimeThreads

  constructor():
    array := list of TimeThreads
  end constructor

  function insert(tThread : TimeThread):
    array.add(tThread)
    percolateUp(tThread)
  end insert

  function poll -> TimeThread:
    TimeThread temp = array.get(0)
    array.set(0, array.remove(array.size()-1))
    heapify()
    return temp
  end poll

  function percolateUp(tThread : TimeThread):
    h = array.size() - 1
    while h > 1 and tThread.compareTo(array.get(h / 2 - 1)) < 0:
      array.set(h-1, array[h/2-1])
      h = h/2

    array.set(h - 1, tThread)
  end percolateUp

  function percolateDown(r:Integer):
    c := 2 * r
    while c < array.size()
      if c < n-1 and array.get(c - 1) < array.get(c)
        c += 1
	if array.get(r - 1) < array.get(c - 1)
          swap(r-1,c-1)
	  r = c
	  c = 2 * c
	else
          return
  end percolateDown

  function heapify:
    r := array.size() / 2
    while (r >= 0){
       percolateDown(r)
       r--
  end heapify

  function swap(a, b: Integer):
    temp := array.get(a)
    array.set(a, array.get(b))
    array.set(b, temp)
  end swap

  isEmpty() -> Boolean
    return array.isEmpty()
  end isEmpty

end PriorityQueue

The Alarm class will be implemented with a class for waiting threads that implements the comparable interface in java (TimerThread). This class will be used to store the current thread that needs to wait as well as the time  that it has been designated to wait. Within the class, the thread will be set to the thread it is passed and the wake time will be set as the time the constructor recieves plus the current clock time. These wait-ing threads will be then be put into a priority queue implemented as a heap data structure. The heap will keep the value with the smallest (soonest) wake time at the top position making it the trivial to check the soonest waking thread and wake if necessary.

timerInterrupt will check if time >= wake time of top of the heap structure, if it is, it will move that thread to the ready queue and then loop to see if any other threads are ready to wake.

function timerInterrupt:
  if waitQueue is empty
    return
  while waitQueue.peek().wakeTime <= clockTime
    waitQueue.pop().wakeThread.ready()

  currentThread.yield()
end timerInterrupt

waitUntil(long time) will be used to sleep a thread for at least x milliseconds. A new TimeThread instance is created using the current thread and the time passed in the parameter. It is then pushed on the priority queue and the thread is slept.

function waitUntil: var time (Long)
  disable interrupts
  timeThread := TimeThread(currentThread, time)
  waitQueue.push(timeThread)
  currentThread.sleep()
  enable interrupts
end waitUntil


Alarm Test Cases:
Case 1: calling waitUntil on a thread using a positive number. The thread should create an instance of TimeThread and add it to the waitqueue, then sleep the thread.
Case 2: calling waitUntil on a thread using a negative number. The thread should create an instance of TimeThread and add it to the waitqueue, then sleep the thread. (Will be removed at next timer interrupt)
Case 3: calling timerInterrupt if the waitQueue is empty. The method will just return.
Case 4: calling timerInterrupt with one wakable (waketime <= clockTime) node. The method will wake the thread and move it onto the ready queue, then it will yield the current thread.
Case 5: calling timerInterrupt with mutliple wakable nodes. The method will wake the thread at the top of the queue, then it will continuing looping through the heap, waking the nodes that are wakable. Then it
will yield the current thread.

***************************** Task 4 - Communicator *****************************

For each Communicator instance, there is one lock that is shared between two conditions. Both conditions keep track of threads that are listening and speaking respectively. There are also counters to keep track of how many listeners and speakers are waiting, though it should be noted that there should be no case where both the speak count and listen count are greater than 0 at the same time. Finally, there is a message instance variable which is used to share the message across both connected threads (once the communication is established).

communicatorLock : Lock
speakCondition : Condition
listenCondition : Condition
listenCount : Int
speakCount : Int
message : Int

constructor
  communicatorLock := Lock()
  speakCondition := Condition2(communicatorLock)
  listenCondition := Condition2(communicatorLock)
  listenCount := 0
  speakCount := 0
end constructor

Checks if the listen count is greater than 0, which means the speaker can be paired up with the speaker immediately by waking up the listener. Since the speaker must finish executing before the listener (to have the communicator's instance variable appropriately set before returning), we will wake the next listener thread on the condition queue, but not yield to it. However, if the listen count is 0, we must increment the speak count and call the speak condition's sleep function, which will add the current thread to the condition's queue, before sleeping it. Once the thread is reawoken (after it is paired with a listener), the speak count must be decremented. Finally, the speaker must set the communicator's message instance variable to be the word passed in as a parameter to the speak function. (This message will later be accessed by the paired listener.)

function speak(word:Int)
  communicatorLock.acquire()

  if listenCount > 0
    listenCondition.wake()
    communicatorLock.release()
  else
    speakCount += 1
    speakCondition.sleep()
    speakCount -= 1

  message = word

end speak

Checks if the speak count is greater than 0, which means the listener can be paired up with the speaker immediately by waking up the speaker, and yielding the current thread (so that the speaker has a chance to finish execution, setting the message instance variable, before the listener returns the message). Otherwise, if there are no speakers (speak count is 0), we must increment the listen count before calling the listen condition's sleep function, which will add the current thread to the condition's queue, and sleep it. Once the thread is reawoken, the listen count must be decremented. By this point, the speaker that was paired with this thread will have set the communicator's message instance variable, which is then returned.

function listen -> Int
  communicatorLock.acquire()

  if speakCount > 0
    speakCondition.wake()
    communicatorLock.release()
    currentThread.yield()
  else
    listenCount += 1
    communicatorLock.acquire()
    listenCondition.sleep()
    listenCount -= 1
    communicatorLock.release()

  return message

end speak

Communicator Test Cases:

Notes: When specifying speakers, we should use different values as the messages for each different speaker, to ensure expected order.

Case 1: Add a listening thread to the communicator. The thread should sleep. The listener count should be 1.
Case 2: Add another listening thread to the communicator. The thread should sleep. The listener count should be 2.
Case 3: Add a speaking thread to the communicator. The first listening thread should be be woken up (and added to the ready queue), however the current speaking thread should finish executing first. Once the speaking thread finishes executing, the communicator's message variable should be set to the word specified by the speaker. Once the listening thread begins execution, the communicator's message should not have changed since the speaker set it. The listener count should be 1.
Case 4: Add another speaking thread to the communicator. The second (now at the top of the queue) listening thread should sleep, however the current speaking thread should finish executing first. Just like before, the communicator's message variable should be set to the word specified by the current speaker. Once the listener thread executes, the communicator's message should not have changed. Both the listener and speaker count should now be 0.
Case 5: Add a speaker thread to the communicator. The thread should sleep. The speaker count should be 1.
Case 6: Add another speaker thread to the communicator. The thread should sleep. The speaker count should be 2.
Case 7: Add a listener thread to the communicator. The first speaker thread on the queue shoud be woken up. The listener thread should not sleep, but should yield execution to make sure the speaker thread executes first. The communicator's message should be changed by the speaker, and by the time the listener thread continues execution, the communicator's message should be the same as what the speaker thread set it to. The speaker count should now be 1.
Case 8: Add another listener thread to the communicator. This will effectively test the same thing as case 7, however should make both the speaker and listener count be 0.

***************************** Task 5 - ReactWater *****************************

A ReactWater instance will keep track of oxygen threads and hydrogen threads. Oxygen and Hydrogen threads can be added to the thread queues in their respective conditions, with the hCount and oCounts being used to keep track of how many oxygen and hydrogen threads exist. Both of the conditions will share the same lock.

waterLock : Lock
hCount : Int
oCount : Int
hCondition : Condition
oCondition : Condition

constructor
  hCount := 0
  oCount := 0
  waterLock := Lock()
  hCondition := Condition(waterLock)
  oCondition := Condition(waterLock)
end constructor

The calling thread will be treated as Oxygen. If there are already 2 hydrogen stored in the hydrogen condition queue, then we have all the elements necessary to create water. We must wake up two hydrogen threads, subtract 2 from the hydrogen count, and then call the make water function. Otherwise, if there is not enough hydrogen to form water, we must increment the oxygen count by 1 and call sleep on the oxygen condition (which will add the current thread to its queue, and sleep it).

function oReady
  waterLock.acquire()
  if hCount >= 2
    hCondition.wake()
    hCondition.wake()
    hCount -= 2
    makeWater()
  else
    oCount += 1
    waterLock.acquire()
    oCondition.sleep()

  waterLock.release()
end oReady

The calling thread will be treated as Hydrogen. If there are already 1 oxygen and 1 hydrogen stored in their respective condition queues, we have all the elements necessary to create water. We must wake one oxygen and one hydrogen thread, and subtract one from both the hydrogen count and oxygen count. Afterwards, we make a call to the create water function. Otherwise, if there is not enough hydrogen or no oxygen available, we must increment the hydrogen count by one, and call sleep on the hydrogen condition (which will add the current thread to its queue, and sleep it).

function hReady
  waterLock.acquire()
  if hCount > 0 and oCount > 0
    hCondition.wake()
    oCondition.waker()
    hCount -= 1
    oCount -= 1
    makeWater()
  else
    hCount += 1
    waterLock.acquire()
    hCondition.sleep()

  waterLock.release()

end hReady

This function is called when water is successfully made. The implementation simply prints a statement indicating that water was, in fact, made.

function makeWater
  print "Water was made!"
end makeWater

ReactWater Test Cases

Case 1: Add a hydrogen thread to ReactWater. The thread should be asleep. The hydrogen count should be at 1.
Case 2: Add another hydrogen thread to ReactWater. Both threads should be asleep. The hydrogen count should be at 2.
Case 3: Add another hydrogen thread to ReactWater. All three threads should be asleep. The hydrogen count should be at 3.
Case 4: Add an oxygen thread to ReactWater. The first 2 hydrogen threads should be woken up (and finish executing), and the current oxygen thread should not sleep. The makeWater function should be called, printing "Water was made!". The hydrogen count should now be at 1, and the oxygen count should remain at 0.
Case 5: Add an oxygen thread to ReactWater. The thread should be asleep. The hydrogen count should be 1, and the oxygen count should be 1.
Case 6: Add an oxygen thread to ReactWater. The thread should be asleep. The hydrogen count should be 1, and the oxygen count should be 2.
Case 7: Add a hydrogen thread to ReactWater. The other (sleeping) hydrogen thread should be woken up, and the first of the oxygen threads should be woken up. The current (hydrogen) thread should not sleep. The makeWater function should be called, printing "Water was made!". The hydrogen count should now be 0, and the oxygen count should now be 1.
