In Condition2, we need to create a threadQueue object.

function sleep
  assert conditionLock.isHeldByCurrentThread()
  interrupt.disable()
  conditionLock.release()
  
  threadQueue.push(currentThread)
  currentThread.sleep()

  conditionLock.acquire()
  interrupt.enable()
end sleep
 
function wake
  assert conditionLock.isHeldByCurrentThread()
  interrupt.disable()

  thread := threadQueue.nextThread()
  if thread is not null
    thread.ready()

  interrupt.enable()
end wake
  
function wakeAll
  assert conditionLock.isHeldByCurrentThread()
  while threadQueue is not empty
    wake()
end wakeAll
** NOTE : May need to call interrupt.enable(), but I don't think we do. **

function join
  jLock.acquire() -- Acquire lock
  
  if status is finished
    jLock.release()
  
